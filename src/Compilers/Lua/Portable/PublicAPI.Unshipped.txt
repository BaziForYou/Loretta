#nullable enable
*REMOVED*Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax.AddNames(params Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax![]! items) -> Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax!
*REMOVED*Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax.Names.get -> Loretta.CodeAnalysis.SeparatedSyntaxList<Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax!>
*REMOVED*Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax.Update(Loretta.CodeAnalysis.SyntaxToken localKeyword, Loretta.CodeAnalysis.SeparatedSyntaxList<Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax!> names, Loretta.CodeAnalysis.Lua.Syntax.EqualsValuesClauseSyntax? equalsValues, Loretta.CodeAnalysis.SyntaxToken semicolonToken) -> Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax!
*REMOVED*Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax.WithNames(Loretta.CodeAnalysis.SeparatedSyntaxList<Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax!> names) -> Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax!
*REMOVED*static Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalVariableDeclarationStatement(Loretta.CodeAnalysis.SeparatedSyntaxList<Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax!> names, Loretta.CodeAnalysis.Lua.Syntax.EqualsValuesClauseSyntax? equalsValues) -> Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax!
*REMOVED*static Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalVariableDeclarationStatement(Loretta.CodeAnalysis.SeparatedSyntaxList<Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax!> names, Loretta.CodeAnalysis.SeparatedSyntaxList<Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax!> values) -> Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax!
*REMOVED*static Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalVariableDeclarationStatement(Loretta.CodeAnalysis.SeparatedSyntaxList<Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax!> names) -> Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax!
*REMOVED*static Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalVariableDeclarationStatement(Loretta.CodeAnalysis.SyntaxToken localKeyword, Loretta.CodeAnalysis.SeparatedSyntaxList<Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax!> names, Loretta.CodeAnalysis.Lua.Syntax.EqualsValuesClauseSyntax? equalsValues, Loretta.CodeAnalysis.SyntaxToken semicolonToken) -> Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax!
*REMOVED*Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.LuaSyntaxOptions(bool acceptBinaryNumbers, bool acceptCCommentSyntax, bool acceptCompoundAssignment, bool acceptEmptyStatements, bool acceptCBooleanOperators, bool acceptGoto, bool acceptHexEscapesInStrings, bool acceptHexFloatLiterals, bool acceptOctalNumbers, bool acceptShebang, bool acceptUnderscoreInNumberLiterals, bool useLuaJitIdentifierRules, bool acceptBitwiseOperators, bool acceptWhitespaceEscape, bool acceptUnicodeEscape, Loretta.CodeAnalysis.Lua.ContinueType continueType, bool acceptIfExpression, bool acceptHashStrings, bool acceptInvalidEscapes) -> void
*REMOVED*Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.With(Tsu.Option<bool> acceptBinaryNumbers = default(Tsu.Option<bool>), Tsu.Option<bool> acceptCCommentSyntax = default(Tsu.Option<bool>), Tsu.Option<bool> acceptCompoundAssignment = default(Tsu.Option<bool>), Tsu.Option<bool> acceptEmptyStatements = default(Tsu.Option<bool>), Tsu.Option<bool> acceptCBooleanOperators = default(Tsu.Option<bool>), Tsu.Option<bool> acceptGoto = default(Tsu.Option<bool>), Tsu.Option<bool> acceptHexEscapesInStrings = default(Tsu.Option<bool>), Tsu.Option<bool> acceptHexFloatLiterals = default(Tsu.Option<bool>), Tsu.Option<bool> acceptOctalNumbers = default(Tsu.Option<bool>), Tsu.Option<bool> acceptShebang = default(Tsu.Option<bool>), Tsu.Option<bool> acceptUnderscoreInNumberLiterals = default(Tsu.Option<bool>), Tsu.Option<bool> useLuaJitIdentifierRules = default(Tsu.Option<bool>), Tsu.Option<bool> acceptBitwiseOperators = default(Tsu.Option<bool>), Tsu.Option<bool> acceptWhitespaceEscape = default(Tsu.Option<bool>), Tsu.Option<bool> acceptUnicodeEscape = default(Tsu.Option<bool>), Tsu.Option<Loretta.CodeAnalysis.Lua.ContinueType> continueType = default(Tsu.Option<Loretta.CodeAnalysis.Lua.ContinueType>), Tsu.Option<bool> acceptIfExpression = default(Tsu.Option<bool>), Tsu.Option<bool> acceptHashStrings = default(Tsu.Option<bool>), Tsu.Option<bool> acceptInvalidEscapes = default(Tsu.Option<bool>)) -> Loretta.CodeAnalysis.Lua.LuaSyntaxOptions!
Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptLocalVariableAttributes.get -> bool
Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.LuaSyntaxOptions(bool acceptBinaryNumbers, bool acceptCCommentSyntax, bool acceptCompoundAssignment, bool acceptEmptyStatements, bool acceptCBooleanOperators, bool acceptGoto, bool acceptHexEscapesInStrings, bool acceptHexFloatLiterals, bool acceptOctalNumbers, bool acceptShebang, bool acceptUnderscoreInNumberLiterals, bool useLuaJitIdentifierRules, bool acceptBitwiseOperators, bool acceptWhitespaceEscape, bool acceptUnicodeEscape, Loretta.CodeAnalysis.Lua.ContinueType continueType, bool acceptIfExpression, bool acceptHashStrings, bool acceptInvalidEscapes, bool acceptLocalVariableAttributes) -> void
Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.With(Tsu.Option<bool> acceptBinaryNumbers = default(Tsu.Option<bool>), Tsu.Option<bool> acceptCCommentSyntax = default(Tsu.Option<bool>), Tsu.Option<bool> acceptCompoundAssignment = default(Tsu.Option<bool>), Tsu.Option<bool> acceptEmptyStatements = default(Tsu.Option<bool>), Tsu.Option<bool> acceptCBooleanOperators = default(Tsu.Option<bool>), Tsu.Option<bool> acceptGoto = default(Tsu.Option<bool>), Tsu.Option<bool> acceptHexEscapesInStrings = default(Tsu.Option<bool>), Tsu.Option<bool> acceptHexFloatLiterals = default(Tsu.Option<bool>), Tsu.Option<bool> acceptOctalNumbers = default(Tsu.Option<bool>), Tsu.Option<bool> acceptShebang = default(Tsu.Option<bool>), Tsu.Option<bool> acceptUnderscoreInNumberLiterals = default(Tsu.Option<bool>), Tsu.Option<bool> useLuaJitIdentifierRules = default(Tsu.Option<bool>), Tsu.Option<bool> acceptBitwiseOperators = default(Tsu.Option<bool>), Tsu.Option<bool> acceptWhitespaceEscape = default(Tsu.Option<bool>), Tsu.Option<bool> acceptUnicodeEscape = default(Tsu.Option<bool>), Tsu.Option<Loretta.CodeAnalysis.Lua.ContinueType> continueType = default(Tsu.Option<Loretta.CodeAnalysis.Lua.ContinueType>), Tsu.Option<bool> acceptIfExpression = default(Tsu.Option<bool>), Tsu.Option<bool> acceptHashStrings = default(Tsu.Option<bool>), Tsu.Option<bool> acceptInvalidEscapes = default(Tsu.Option<bool>), Tsu.Option<bool> acceptLocalVariableAttributes = default(Tsu.Option<bool>)) -> Loretta.CodeAnalysis.Lua.LuaSyntaxOptions!
Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax
Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax.Attribute.get -> Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax?
Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax.AttributeName.get -> string?
Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax.IdentifierName.get -> Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax!
Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax.Name.get -> string!
Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax.Update(Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax! identifierName, Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax? attribute) -> Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax!
Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax.WithAttribute(Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax? attribute) -> Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax!
Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax.WithIdentifierName(Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax! identifierName) -> Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax!
Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax.AddNames(params Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax![]! items) -> Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax!
Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax.Names.get -> Loretta.CodeAnalysis.SeparatedSyntaxList<Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax!>
Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax.Update(Loretta.CodeAnalysis.SyntaxToken localKeyword, Loretta.CodeAnalysis.SeparatedSyntaxList<Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax!> names, Loretta.CodeAnalysis.Lua.Syntax.EqualsValuesClauseSyntax? equalsValues, Loretta.CodeAnalysis.SyntaxToken semicolonToken) -> Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax!
Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax.WithNames(Loretta.CodeAnalysis.SeparatedSyntaxList<Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax!> names) -> Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax!
Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax
Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax.GreaterThanToken.get -> Loretta.CodeAnalysis.SyntaxToken
Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax.Identifier.get -> Loretta.CodeAnalysis.SyntaxToken
Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax.LessThanToken.get -> Loretta.CodeAnalysis.SyntaxToken
Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax.Name.get -> string!
Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax.Update(Loretta.CodeAnalysis.SyntaxToken lessThanToken, Loretta.CodeAnalysis.SyntaxToken identifier, Loretta.CodeAnalysis.SyntaxToken greaterThanToken) -> Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax!
Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax.WithGreaterThanToken(Loretta.CodeAnalysis.SyntaxToken greaterThanToken) -> Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax!
Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax.WithIdentifier(Loretta.CodeAnalysis.SyntaxToken identifier) -> Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax!
Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax.WithLessThanToken(Loretta.CodeAnalysis.SyntaxToken lessThanToken) -> Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax!
Loretta.CodeAnalysis.Lua.SyntaxKind.LocalDeclarationName = 2085 -> Loretta.CodeAnalysis.Lua.SyntaxKind
Loretta.CodeAnalysis.Lua.SyntaxKind.VariableAttribute = 2084 -> Loretta.CodeAnalysis.Lua.SyntaxKind
override Loretta.CodeAnalysis.Lua.LuaSyntaxRewriter.VisitLocalDeclarationName(Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax! node) -> Loretta.CodeAnalysis.SyntaxNode?
override Loretta.CodeAnalysis.Lua.LuaSyntaxRewriter.VisitVariableAttribute(Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax! node) -> Loretta.CodeAnalysis.SyntaxNode?
override Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax.Accept(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor! visitor) -> void
override Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>! visitor) -> TResult?
override Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax.Accept(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor! visitor) -> void
override Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>! visitor) -> TResult?
static Loretta.CodeAnalysis.Lua.SyntaxFactory.HashLiteral(Loretta.CodeAnalysis.SyntaxTriviaList leading, string! text, uint value, Loretta.CodeAnalysis.SyntaxTriviaList trailing) -> Loretta.CodeAnalysis.SyntaxToken
static Loretta.CodeAnalysis.Lua.SyntaxFactory.HashLiteral(string! stringValue) -> Loretta.CodeAnalysis.SyntaxToken
static Loretta.CodeAnalysis.Lua.SyntaxFactory.HashLiteral(string! text, uint value) -> Loretta.CodeAnalysis.SyntaxToken
static Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalDeclarationName(Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax! identifierName, Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax? attribute) -> Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalDeclarationName(Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax! identifierName) -> Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalDeclarationName(string! identifierName) -> Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalVariableDeclarationStatement(Loretta.CodeAnalysis.SeparatedSyntaxList<Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax!> names, Loretta.CodeAnalysis.Lua.Syntax.EqualsValuesClauseSyntax? equalsValues) -> Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalVariableDeclarationStatement(Loretta.CodeAnalysis.SeparatedSyntaxList<Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax!> names, Loretta.CodeAnalysis.SeparatedSyntaxList<Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax!> values) -> Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalVariableDeclarationStatement(Loretta.CodeAnalysis.SeparatedSyntaxList<Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax!> names) -> Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalVariableDeclarationStatement(Loretta.CodeAnalysis.SyntaxToken localKeyword, Loretta.CodeAnalysis.SeparatedSyntaxList<Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax!> names, Loretta.CodeAnalysis.Lua.Syntax.EqualsValuesClauseSyntax? equalsValues, Loretta.CodeAnalysis.SyntaxToken semicolonToken) -> Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.VariableAttribute(Loretta.CodeAnalysis.SyntaxToken identifier) -> Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.VariableAttribute(Loretta.CodeAnalysis.SyntaxToken lessThanToken, Loretta.CodeAnalysis.SyntaxToken identifier, Loretta.CodeAnalysis.SyntaxToken greaterThanToken) -> Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.VariableAttribute(string! identifier) -> Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax!
static readonly Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.Lua54 -> Loretta.CodeAnalysis.Lua.LuaSyntaxOptions!
virtual Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitLocalDeclarationName(Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax! node) -> void
virtual Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitVariableAttribute(Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax! node) -> void
virtual Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>.VisitLocalDeclarationName(Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax! node) -> TResult?
virtual Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>.VisitVariableAttribute(Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax! node) -> TResult?