#nullable enable
Loretta.CodeAnalysis.Lua.UnitTests.Experimental.NamingStrategiesTests
Loretta.CodeAnalysis.Lua.UnitTests.Experimental.NamingStrategiesTests.NamingStrategies_Alphabetic_DoesNotFallIntoAnInfiniteLoop() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Experimental.NamingStrategiesTests.NamingStrategiesTests() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.Lexer_EmitsDiagnosticOn_UnfinishedLongComment(string! text) -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.Lexer_EmitsDiagnosticsOn_InvalidEscapes() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.Lexer_EmitsDiagnosticsOn_InvalidNumbers() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.Lexer_EmitsDiagnosticsOn_LargeNumbersAndOverflows() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.Lexer_EmitsDiagnosticsOn_StringWithLineBreak() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.Lexer_EmitsDiagnosticsOn_UnterminatedShortString(string! text) -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.Lexer_EmitsDiagnosticsWhen_HashStringsAreFound_And_LuaSyntaxOptionsAcceptHashStringsIsFalse() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.Lexer_EmitsDiagnosticsWhen_HexEscapesAreFound_And_LuaSyntaxOptionsAcceptHexEscapesIsFalse() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.Lexer_EmitsDiagnosticsWhen_InvalidUnicodeEscapesAreFound() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.Lexer_EmitsDiagnosticsWhen_UnicodeEscapesAreFound_And_LuaSyntaxOptionsAcceptUnicodeEscapeIsFalse() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.Lexer_EmitsDiagnosticsWhen_WhitespaceEscapesAreFound_And_LuaSyntaxOptionsAcceptWhitespaceEscapeIsFalse() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.Lexer_EmitsDiagnosticWhen_BadCharactersAreFound() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.Lexer_EmitsDiagnosticWhen_BinaryNumberIsFound_And_LuaSyntaxOptionsAcceptBinaryNumbersIsFalse() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.Lexer_EmitsDiagnosticWhen_CCommentIsFound_And_LuaSyntaxOptionsAcceptCCommentsIsFalse() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.Lexer_EmitsDiagnosticWhen_HexFloatIsFound_And_LuaSyntaxOptionsAcceptHexFloatIsFalse() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.Lexer_EmitsDiagnosticWhen_IdentifiersWithCharactersAbove0x7FAreFound_And_LuaSyntaxOptionsUseLuajitIdentifierRulesIsFalse() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.Lexer_EmitsDiagnosticWhen_OctalNumberIsFound_And_LuaSyntaxOptionsAcceptOctalNumbersIsFalse() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.Lexer_EmitsDiagnosticWhen_ShebangIsFound_And_LuaSyntaxOptionsAcceptShebangIsFalse() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.Lexer_EmitsDiagnosticWhen_UnderscoreInNumberIsFound_And_LuaSyntaxOptionsAcceptUnderscoresInNumbersIsFalse() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.Lexer_EmitsMultipleDiagnosticsWhen_MultipleHexEscapesAreFound_And_LuaSyntaxOptionsAcceptHexEscapesIsFalse() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.Lexer_EmitsNoDiagnosticsWhen_AnInvalidEscapeIsFound() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.Lexer_EmitsWarning_ForExoticLineBreak() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalErrorTests.LexicalErrorTests() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalTests
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalTests.Lexer_Covers_AllTokens() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalTests.Lexer_DoesNot_CountNumberDigitsNaively(string! text) -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalTests.Lexer_DoesNot_IdentifyLongCommentsNaively(string! text) -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalTests.Lexer_Lexes_ShebangsOnlyOnFileStart() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalTests.Lexer_Lexes_Token(Loretta.CodeAnalysis.Lua.LuaSyntaxOptions! options, Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortToken expectedToken) -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalTests.Lexer_Lexes_TokenPairs(Loretta.CodeAnalysis.Lua.LuaSyntaxOptions! options, Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortToken tokenA, Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortToken tokenB) -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalTests.Lexer_Lexes_TokenPairs_WithSeparators(Loretta.CodeAnalysis.Lua.LuaSyntaxOptions! options, Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortToken tokenA, Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortToken expectedSeparator, Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortToken tokenB) -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalTests.Lexer_Lexes_Trivia(Loretta.CodeAnalysis.Lua.LuaSyntaxOptions! options, Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortToken expectedTrivia) -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalTests.Lexer_LexesInvalidEscapes_WhenLuaSyntaxOptionsAcceptInvalidEscapesIsTrue() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalTests.LexicalTests() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.RunLongLexerTests
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.RunLongLexerTests.RunLongLexerTests() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortDiagnostic
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortDiagnostic.Deconstruct(out string! id, out string! description, out Loretta.CodeAnalysis.Text.TextSpan span) -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortDiagnostic.ShortDiagnostic() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortDiagnostic.ShortDiagnostic(Loretta.CodeAnalysis.Diagnostic! diagnostic) -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortDiagnostic.ShortDiagnostic(string! id, string! description, Loretta.CodeAnalysis.Text.TextSpan span) -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortToken
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortToken.ShortToken() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortToken.ShortToken(Loretta.CodeAnalysis.Lua.SyntaxKind kind, string! text, Loretta.CodeAnalysis.Text.TextSpan span, Tsu.Option<object?> value = default(Tsu.Option<object?>)) -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortToken.ShortToken(Loretta.CodeAnalysis.Lua.SyntaxKind kind, string! text, Tsu.Option<object?> value = default(Tsu.Option<object?>)) -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortToken.ShortToken(Loretta.CodeAnalysis.SyntaxToken token) -> void
Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortToken.WithSpan(Loretta.CodeAnalysis.Text.TextSpan span) -> Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortToken
Loretta.CodeAnalysis.Lua.UnitTests.Parsing.ParsingTests
Loretta.CodeAnalysis.Lua.UnitTests.Parsing.ParsingTests.EOF() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Parsing.ParsingTests.M(Loretta.CodeAnalysis.Lua.SyntaxKind kind) -> Loretta.CodeAnalysis.SyntaxNodeOrToken
Loretta.CodeAnalysis.Lua.UnitTests.Parsing.ParsingTests.N(Loretta.CodeAnalysis.Lua.SyntaxKind kind, string? value = null) -> Loretta.CodeAnalysis.SyntaxNodeOrToken
Loretta.CodeAnalysis.Lua.UnitTests.Parsing.ParsingTests.ParsingTests(Xunit.Abstractions.ITestOutputHelper! output) -> void
Loretta.CodeAnalysis.Lua.UnitTests.Parsing.ParsingTests.UsingNode(Loretta.CodeAnalysis.Lua.LuaSyntaxNode! root) -> void
Loretta.CodeAnalysis.Lua.UnitTests.Parsing.ParsingTests.UsingNode(string! text) -> Loretta.CodeAnalysis.Lua.LuaSyntaxNode!
Loretta.CodeAnalysis.Lua.UnitTests.Parsing.ParsingTests.UsingNode(string! text, Loretta.CodeAnalysis.Lua.LuaParseOptions! options, params Loretta.CodeAnalysis.Test.Utilities.DiagnosticDescription![]! expectedErrors) -> Loretta.CodeAnalysis.Lua.LuaSyntaxNode!
Loretta.CodeAnalysis.Lua.UnitTests.Parsing.ParsingTests.UsingNode(string! text, Loretta.CodeAnalysis.Lua.LuaSyntaxNode! node, Loretta.CodeAnalysis.Test.Utilities.DiagnosticDescription![]! expectedErrors) -> void
Loretta.CodeAnalysis.Lua.UnitTests.Parsing.ParsingTests.UsingTree(string! text, Loretta.CodeAnalysis.Lua.LuaParseOptions? options = null) -> Loretta.CodeAnalysis.SyntaxTree!
Loretta.CodeAnalysis.Lua.UnitTests.Parsing.SyntaxExtensions
Loretta.CodeAnalysis.Lua.UnitTests.Scoping.CanBeAccessedInTests
Loretta.CodeAnalysis.Lua.UnitTests.Scoping.CanBeAccessedInTests.CanBeAccessedInTests() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Scoping.CanBeAccessedInTests.Script_CanBeAccessedIn_ReturnsFalseWhenScopeIsParentOfParent() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Scoping.CanBeAccessedInTests.Script_CanBeAccessedIn_ReturnsTrueWhenSameScope() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Scoping.CanBeAccessedInTests.Script_CanBeAccessedIn_ReturnsTrueWhenScopeIsChild() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Scoping.FindVariableTests
Loretta.CodeAnalysis.Lua.UnitTests.Scoping.FindVariableTests.FindVariableTests() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Scoping.FindVariableTests.Script_FindVariable_ReturnsNullWhenNoVariableIsAvailable(Loretta.CodeAnalysis.Lua.ScopeKind scopeKind, string! name) -> void
Loretta.CodeAnalysis.Lua.UnitTests.Scoping.FindVariableTests.Script_FindVariable_ReturnsVariableWhenVariableIsAvailable(Loretta.CodeAnalysis.Lua.ScopeKind scopeKind, string! name) -> void
Loretta.CodeAnalysis.Lua.UnitTests.Scoping.RenameVariableTests
Loretta.CodeAnalysis.Lua.UnitTests.Scoping.RenameVariableTests.RenameVariableTests() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Scoping.RenameVariableTests.Script_RenameVariable_ReturnsCorrectlyRenamedScript() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Scoping.RenameVariableTests.Script_RenameVariable_ReturnsErrorForConflictingVariable() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Scoping.RenameVariableTests.Script_RenameVariable_ReturnsErrorForUnsupportedIdentifier() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Scoping.ScopeTests
Loretta.CodeAnalysis.Lua.UnitTests.Scoping.ScopeTests.CompilationUnit_HasFileScope() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Scoping.ScopeTests.FindScope_OnRootElement_ReturnsRootScope() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Scoping.ScopeTests.ScopeTests() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Scoping.ScriptTestsBase
Loretta.CodeAnalysis.Lua.UnitTests.Scoping.ScriptTestsBase.ScriptTestsBase() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Syntax.SyntaxKindTests
Loretta.CodeAnalysis.Lua.UnitTests.Syntax.SyntaxKindTests.SyntaxKindHasNoDuplicates() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Syntax.SyntaxKindTests.SyntaxKindTests() -> void
Loretta.CodeAnalysis.Lua.UnitTests.Syntax.SyntaxKindTests.TokenKindsHaveText() -> void
override Loretta.CodeAnalysis.Lua.UnitTests.Lexical.RunLongLexerTests.ShouldSkip.get -> bool
override Loretta.CodeAnalysis.Lua.UnitTests.Lexical.RunLongLexerTests.SkipReason.get -> string!
override Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortToken.ToString() -> string!
readonly Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortDiagnostic.Description -> string!
readonly Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortDiagnostic.Id -> string!
readonly Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortDiagnostic.Span -> Loretta.CodeAnalysis.Text.TextSpan
readonly Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortToken.Kind -> Loretta.CodeAnalysis.Lua.SyntaxKind
readonly Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortToken.Span -> Loretta.CodeAnalysis.Text.TextSpan
readonly Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortToken.Text -> string!
readonly Loretta.CodeAnalysis.Lua.UnitTests.Lexical.ShortToken.Value -> Tsu.Option<object?>
static Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalTests.GetTokenPairsData() -> System.Collections.Generic.IEnumerable<object![]!>!
static Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalTests.GetTokenPairsWithSeparatorsData() -> System.Collections.Generic.IEnumerable<object![]!>!
static Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalTests.GetTokensData() -> System.Collections.Generic.IEnumerable<object![]!>!
static Loretta.CodeAnalysis.Lua.UnitTests.Lexical.LexicalTests.GetTriviaData() -> System.Collections.Generic.IEnumerable<object![]!>!
static Loretta.CodeAnalysis.Lua.UnitTests.Parsing.ParsingTests.ParseAndValidate(string! text, Loretta.CodeAnalysis.Lua.LuaParseOptions! options, params Loretta.CodeAnalysis.Test.Utilities.DiagnosticDescription![]! expectedErrors) -> void
static Loretta.CodeAnalysis.Lua.UnitTests.Parsing.ParsingTests.ParseAndValidate(string! text, Loretta.CodeAnalysis.Lua.LuaSyntaxOptions? options = null, params Loretta.CodeAnalysis.Test.Utilities.DiagnosticDescription![]! expectedErrors) -> void
static Loretta.CodeAnalysis.Lua.UnitTests.Parsing.ParsingTests.ParseAndValidateFirst(string! text, Loretta.CodeAnalysis.Test.Utilities.DiagnosticDescription! expectedFirstError) -> void
static Loretta.CodeAnalysis.Lua.UnitTests.Parsing.ParsingTests.ParseFile(string! text, Loretta.CodeAnalysis.Lua.LuaParseOptions? parseOptions = null) -> Loretta.CodeAnalysis.Lua.Syntax.CompilationUnitSyntax!
static Loretta.CodeAnalysis.Lua.UnitTests.Parsing.SyntaxExtensions.GetLeadingTrivia(this Loretta.CodeAnalysis.SyntaxNode! node) -> Loretta.CodeAnalysis.SyntaxTriviaList
static Loretta.CodeAnalysis.Lua.UnitTests.Parsing.SyntaxExtensions.GetLeadingTrivia(this Loretta.CodeAnalysis.SyntaxToken token) -> Loretta.CodeAnalysis.SyntaxTriviaList
static Loretta.CodeAnalysis.Lua.UnitTests.Parsing.SyntaxExtensions.GetTrailingTrivia(this Loretta.CodeAnalysis.SyntaxNode! node) -> Loretta.CodeAnalysis.SyntaxTriviaList
static Loretta.CodeAnalysis.Lua.UnitTests.Parsing.SyntaxExtensions.GetTrailingTrivia(this Loretta.CodeAnalysis.SyntaxToken token) -> Loretta.CodeAnalysis.SyntaxTriviaList
static Loretta.CodeAnalysis.Lua.UnitTests.Scoping.ScriptTestsBase.ParseScript(Loretta.CodeAnalysis.Lua.LuaSyntaxOptions! options, params string![]! codes) -> Loretta.CodeAnalysis.Lua.Script!
static Loretta.CodeAnalysis.Lua.UnitTests.Scoping.ScriptTestsBase.ParseScript(params string![]! codes) -> Loretta.CodeAnalysis.Lua.Script!
static Loretta.CodeAnalysis.Lua.UnitTests.Scoping.ScriptTestsBase.ParseScript(string! code, Loretta.CodeAnalysis.Lua.LuaSyntaxOptions? options = null) -> (Loretta.CodeAnalysis.SyntaxTree!, Loretta.CodeAnalysis.Lua.Script!)
virtual Loretta.CodeAnalysis.Lua.UnitTests.Parsing.ParsingTests.Dispose() -> void
virtual Loretta.CodeAnalysis.Lua.UnitTests.Parsing.ParsingTests.ParseNode(string! text, Loretta.CodeAnalysis.Lua.LuaParseOptions? options) -> Loretta.CodeAnalysis.Lua.LuaSyntaxNode!
virtual Loretta.CodeAnalysis.Lua.UnitTests.Parsing.ParsingTests.ParseTree(string! text, Loretta.CodeAnalysis.Lua.LuaParseOptions? options) -> Loretta.CodeAnalysis.SyntaxTree!
